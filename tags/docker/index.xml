<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Johandry&#39;s Blog</title>
    <link>http://blog.johandry.com/tags/docker/</link>
    <description>Recent content in Docker on Johandry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 02 Oct 2019 19:26:18 -0700</lastBuildDate>
    
	<atom:link href="http://blog.johandry.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lessons Learned: Devendorize and Modularize a Go Project</title>
      <link>http://blog.johandry.com/post/lessons-learned-about-devendorize-and-modularize-a-go-project/</link>
      <pubDate>Wed, 02 Oct 2019 19:26:18 -0700</pubDate>
      
      <guid>http://blog.johandry.com/post/lessons-learned-about-devendorize-and-modularize-a-go-project/</guid>
      <description>defer Conclusions() This week I&#39;ve been working on remove all the vendors of a massive Go project and make it use Go modules. It&#39;s not an easy task considering that it depends of almost 400 packages, many of such packages with different versions and using packages from Terraform and Kubernetes that are also massive consumers of external packages and provides a large amount of them.
Here are my lessons learned in the process of devendorize and modularize a Go project.</description>
    </item>
    
    <item>
      <title>Introduction to Microservices in Go, part 1</title>
      <link>http://blog.johandry.com/post/intro-microservice-in-go-1/</link>
      <pubDate>Fri, 10 Nov 2017 14:20:08 -0800</pubDate>
      
      <guid>http://blog.johandry.com/post/intro-microservice-in-go-1/</guid>
      <description>This is a very simple example about how to build a microservice in Go. It&#39;s meant for a quick Go and Microservices tutorial series covering from the a RESTful API to gRPC on Kubernetes.
The purpose of this microservice is a catalog of movies. The code is at https://github.com/johandry/micro-media-service and every section is a branch, clone the repo and change branch for every section.
git clone https://github.com/johandry/micro-media-service  A simple RESTful API Let&#39;s start with a simple RESTfull API by making a simple web server.</description>
    </item>
    
  </channel>
</rss>