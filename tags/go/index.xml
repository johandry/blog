<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Johandry&#39;s Blog</title>
    <link>http://blog.johandry.com/tags/go/</link>
    <description>Recent content in Go on Johandry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 11:56:02 -0800</lastBuildDate>
    
	<atom:link href="http://blog.johandry.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Kubernetes Client in Go</title>
      <link>http://blog.johandry.com/post/build-k8s-client/</link>
      <pubDate>Sun, 15 Mar 2020 11:56:02 -0800</pubDate>
      
      <guid>http://blog.johandry.com/post/build-k8s-client/</guid>
      <description>Building a Kubernetes Client in Go defer Conclusion()
Now I have the task to build a Kubernetes client in Go. The requirements are something like this: having an existing Kubernetes cluster it&amp;rsquo;s required a program to create or replace resources such as ConfigMaps, Secrets, Services and Deployments.
If you know the resources to create, for example a ConfigMap, it&amp;rsquo;s not a big deal, just use the Kubernetes clientset (kubernetes.Clientset) from github.</description>
    </item>
    
    <item>
      <title>Lessons Learned: Devendorize and Modularize a Go Project</title>
      <link>http://blog.johandry.com/post/lessons-learned-about-devendorize-and-modularize-a-go-project/</link>
      <pubDate>Wed, 02 Oct 2019 19:26:18 -0700</pubDate>
      
      <guid>http://blog.johandry.com/post/lessons-learned-about-devendorize-and-modularize-a-go-project/</guid>
      <description>defer Conclusions() This week I&amp;rsquo;ve been working on remove all the vendors of a massive Go project and make it use Go modules. It&amp;rsquo;s not an easy task considering that it depends of almost 400 packages, many of such packages with different versions and using packages from Terraform and Kubernetes that are also massive consumers of external packages and provides a large amount of them.
Here are my lessons learned in the process of devendorize and modularize a Go project.</description>
    </item>
    
  </channel>
</rss>